{
  "version": 3,
  "sources": ["../../fast-equals/src/utils.ts", "../../fast-equals/src/comparator.ts", "../../fast-equals/src/arrays.ts", "../../fast-equals/src/dates.ts", "../../fast-equals/src/maps.ts", "../../fast-equals/src/objects.ts", "../../fast-equals/src/regexps.ts", "../../fast-equals/src/sets.ts", "../../fast-equals/src/index.ts"],
  "sourcesContent": ["import {\n  EqualityComparator,\n  InternalEqualityComparator,\n  TypeEqualityComparator,\n} from '../index.d';\n\n/**\n * Default equality comparator pass-through, used as the standard `isEqual` creator for\n * use inside the built comparator.\n */\nexport function createDefaultIsNestedEqual<Meta>(\n  comparator: EqualityComparator<Meta>,\n): InternalEqualityComparator<Meta> {\n  return function isEqual<A, B>(\n    a: A,\n    b: B,\n    _indexOrKeyA: any,\n    _indexOrKeyB: any,\n    _parentA: any,\n    _parentB: any,\n    meta: Meta,\n  ) {\n    return comparator(a, b, meta);\n  };\n}\n\n/**\n * Wrap the provided `areItemsEqual` method to manage the circular cache, allowing\n * for circular references to be safely included in the comparison without creating\n * stack overflows.\n */\nexport function createIsCircular<\n  AreItemsEqual extends TypeEqualityComparator<any, any>,\n>(areItemsEqual: AreItemsEqual): AreItemsEqual {\n  return function isCircular(\n    a: any,\n    b: any,\n    isEqual: InternalEqualityComparator<WeakMap<any, any>>,\n    cache: WeakMap<any, any>,\n  ) {\n    if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\n      return areItemsEqual(a, b, isEqual, cache);\n    }\n\n    const cachedA = cache.get(a);\n    const cachedB = cache.get(b);\n\n    if (cachedA && cachedB) {\n      return cachedA === b && cachedB === a;\n    }\n\n    cache.set(a, b);\n    cache.set(b, a);\n\n    const result = areItemsEqual(a, b, isEqual, cache);\n\n    cache.delete(a);\n    cache.delete(b);\n\n    return result;\n  } as AreItemsEqual;\n}\n\n/**\n * Targeted shallow merge of two objects.\n *\n * @NOTE\n * This exists as a tinier compiled version of the `__assign` helper that\n * `tsc` injects in case of `Object.assign` not being present.\n */\nexport function merge<A extends object, B extends object>(a: A, b: B): A & B {\n  const merged: Record<string, any> = {};\n\n  for (const key in a) {\n    merged[key] = a[key];\n  }\n\n  for (const key in b) {\n    merged[key] = b[key];\n  }\n\n  return merged as A & B;\n}\n\n/**\n * Whether the value is a plain object.\n *\n * @NOTE\n * This is a same-realm compariosn only.\n */\nexport function isPlainObject(value: any): boolean {\n  return value.constructor === Object || value.constructor == null;\n}\n\n/**\n * When the value is `Promise`-like, aka \"then-able\".\n */\nexport function isPromiseLike(value: any): boolean {\n  return typeof value.then === 'function';\n}\n\n/**\n * Whether the values passed are strictly equal or both NaN.\n */\nexport function sameValueZeroEqual(a: any, b: any): boolean {\n  return a === b || (a !== a && b !== b);\n}\n", "import { isPlainObject, isPromiseLike, sameValueZeroEqual } from './utils';\n\nimport type {\n  CreateComparatorCreatorOptions,\n  EqualityComparator,\n} from '../index.d';\n\nconst ARGUMENTS_TAG = '[object Arguments]';\nconst BOOLEAN_TAG = '[object Boolean]';\nconst DATE_TAG = '[object Date]';\nconst REG_EXP_TAG = '[object RegExp]';\nconst MAP_TAG = '[object Map]';\nconst NUMBER_TAG = '[object Number]';\nconst OBJECT_TAG = '[object Object]';\nconst SET_TAG = '[object Set]';\nconst STRING_TAG = '[object String]';\n\nconst { toString } = Object.prototype;\n\nexport function createComparator<Meta>({\n  areArraysEqual,\n  areDatesEqual,\n  areMapsEqual,\n  areObjectsEqual,\n  areRegExpsEqual,\n  areSetsEqual,\n  createIsNestedEqual,\n}: CreateComparatorCreatorOptions<Meta>): EqualityComparator<Meta> {\n  const isEqual = createIsNestedEqual(comparator as EqualityComparator<Meta>);\n\n  /**\n   * compare the value of the two objects and return true if they are equivalent in values\n   */\n  function comparator(a: any, b: any, meta: Meta): boolean {\n    // If the items are strictly equal, no need to do a value comparison.\n    if (a === b) {\n      return true;\n    }\n\n    // If the items are not non-nullish objects, then the only possibility\n    // of them being equal but not strictly is if they are both `NaN`. Since\n    // `NaN` is uniquely not equal to itself, we can use self-comparison of\n    // both objects, which is faster than `isNaN()`.\n    if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\n      return a !== a && b !== b;\n    }\n\n    // Checks are listed in order of commonality of use-case:\n    //   1. Common complex object types (plain object, array)\n    //   2. Common data values (date, regexp)\n    //   3. Less-common complex object types (map, set)\n    //   4. Less-common data values (promise, primitive wrappers)\n    // Inherently this is both subjective and assumptive, however\n    // when reviewing comparable libraries in the wild this order\n    // appears to be generally consistent.\n\n    // `isPlainObject` only checks against the object's own realm. Cross-realm\n    // comparisons are rare, and will be handled in the ultimate fallback, so\n    // we can avoid the `toString.call()` cost unless necessary.\n    if (isPlainObject(a) && isPlainObject(b)) {\n      return areObjectsEqual(a, b, isEqual, meta);\n    }\n\n    // `isArray()` works on subclasses and is cross-realm, so we can again avoid\n    // the `toString.call()` cost unless necessary by just checking if either\n    // and then both are arrays.\n    const aArray = Array.isArray(a);\n    const bArray = Array.isArray(b);\n\n    if (aArray || bArray) {\n      return aArray === bArray && areArraysEqual(a, b, isEqual, meta);\n    }\n\n    // Since this is a custom object, use the classic `toString.call()` to get its\n    // type. This is reasonably performant in modern environments like v8 and\n    // SpiderMonkey, and allows for cross-realm comparison when other checks like\n    // `instanceof` do not.\n    const aTag = toString.call(a);\n\n    if (aTag !== toString.call(b)) {\n      return false;\n    }\n\n    if (aTag === DATE_TAG) {\n      // `getTime()` showed better results compared to alternatives like `valueOf()`\n      // or the unary `+` operator.\n      return areDatesEqual(a, b, isEqual, meta);\n    }\n\n    if (aTag === REG_EXP_TAG) {\n      return areRegExpsEqual(a, b, isEqual, meta);\n    }\n\n    if (aTag === MAP_TAG) {\n      return areMapsEqual(a, b, isEqual, meta);\n    }\n\n    if (aTag === SET_TAG) {\n      return areSetsEqual(a, b, isEqual, meta);\n    }\n\n    // If a simple object tag, then we can prioritize a simple object comparison because\n    // it is likely a custom class. If an arguments tag, it should be treated as a standard\n    // object.\n    if (aTag === OBJECT_TAG || aTag === ARGUMENTS_TAG) {\n      // The exception for value comparison is `Promise`-like contracts. These should be\n      // treated the same as standard `Promise` objects, which means strict equality.\n      return isPromiseLike(a) || isPromiseLike(b)\n        ? false\n        : areObjectsEqual(a, b, isEqual, meta);\n    }\n\n    // As the penultimate fallback, check if the values passed are primitive wrappers. This\n    // is very rare in modern JS, which is why it is deprioritized compared to all other object\n    // types.\n    if (aTag === BOOLEAN_TAG || aTag === NUMBER_TAG || aTag === STRING_TAG) {\n      return sameValueZeroEqual(a.valueOf(), b.valueOf());\n    }\n\n    // If not matching any tags that require a specific type of comparison, then we hard-code false because\n    // the only thing remaining is strict equality, which has already been compared. This is for a few reasons:\n    //   - Certain types that cannot be introspected (e.g., `WeakMap`). For these types, this is the only\n    //     comparison that can be made.\n    //   - For types that can be introspected, but rarely have requirements to be compared\n    //     (`ArrayBuffer`, `DataView`, etc.), the cost is avoided to prioritize the common\n    //     use-cases (may be included in a future release, if requested enough).\n    //   - For types that can be introspected but do not have an objective definition of what\n    //     equality is (`Error`, etc.), the subjective decision is to be conservative and strictly compare.\n    // In all cases, these decisions should be reevaluated based on changes to the language and\n    // common development practices.\n    return false;\n  }\n\n  return comparator as EqualityComparator<Meta>;\n}\n", "import { createIsCircular } from './utils';\n\nimport type { InternalEqualityComparator } from '../index.d';\n\n/**\n * Whether the arrays are equal in value.\n */\nexport function areArraysEqual(\n  a: any[],\n  b: any[],\n  isEqual: InternalEqualityComparator<any>,\n  meta: any,\n): boolean {\n  let index = a.length;\n\n  if (b.length !== index) {\n    return false;\n  }\n\n  // Decrementing `while` showed faster results than either incrementing or\n  // decrementing `for` loop and than an incrementing `while` loop. Declarative\n  // methods like `some` / `every` were not used to avoid incurring the garbage\n  // cost of anonymous callbacks.\n  while (index-- > 0) {\n    if (!isEqual(a[index], b[index], index, index, a, b, meta)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Whether the arrays are equal in value, including circular references.\n */\nexport const areArraysEqualCircular = createIsCircular(areArraysEqual);\n", "import { sameValueZeroEqual } from './utils';\n\n/**\n * Whether the dates passed are equal in value.\n *\n * @NOTE\n * This is a standalone function instead of done inline in the comparator\n * to allow for overrides.\n */\nexport function areDatesEqual(a: Date, b: Date): boolean {\n  return sameValueZeroEqual(a.valueOf(), b.valueOf());\n}\n", "import { createIsCircular } from './utils';\n\nimport type { InternalEqualityComparator } from '../index.d';\n\n/**\n * Whether the `Map`s are equal in value.\n */\nexport function areMapsEqual(\n  a: Map<any, any>,\n  b: Map<any, any>,\n  isEqual: InternalEqualityComparator<any>,\n  meta: any,\n): boolean {\n  let isValueEqual = a.size === b.size;\n\n  if (!isValueEqual) {\n    return false;\n  }\n\n  if (!a.size) {\n    return true;\n  }\n\n  // The use of `forEach()` is to avoid the transpilation cost of `for...of` comparisons, and\n  // the inability to control the performance of the resulting code. It also avoids excessive\n  // iteration compared to doing comparisons of `keys()` and `values()`. As a result, though,\n  // we cannot short-circuit the iterations; bookkeeping must be done to short-circuit the\n  // equality checks themselves.\n\n  const matchedIndices: Record<number, true> = {};\n\n  let indexA = 0;\n\n  a.forEach((aValue, aKey) => {\n    if (!isValueEqual) {\n      return;\n    }\n\n    let hasMatch = false;\n    let matchIndexB = 0;\n\n    b.forEach((bValue, bKey) => {\n      if (\n        !hasMatch &&\n        !matchedIndices[matchIndexB] &&\n        (hasMatch =\n          isEqual(aKey, bKey, indexA, matchIndexB, a, b, meta) &&\n          isEqual(aValue, bValue, aKey, bKey, a, b, meta))\n      ) {\n        matchedIndices[matchIndexB] = true;\n      }\n\n      matchIndexB++;\n    });\n\n    indexA++;\n    isValueEqual = hasMatch;\n  });\n\n  return isValueEqual;\n}\n\n/**\n * Whether the `Map`s are equal in value, including circular references.\n */\nexport const areMapsEqualCircular = createIsCircular(areMapsEqual);\n", "import { createIsCircular } from './utils';\n\nimport type { InternalEqualityComparator } from '../index.d';\n\ninterface Dictionary<Value> {\n  [key: string]: Value;\n  $$typeof?: any;\n}\n\nconst OWNER = '_owner';\nconst { hasOwnProperty } = Object.prototype;\n\n/**\n * Whether the objects are equal in value.\n */\nexport function areObjectsEqual(\n  a: Dictionary<any>,\n  b: Dictionary<any>,\n  isEqual: InternalEqualityComparator<any>,\n  meta: any,\n): boolean {\n  const keysA = Object.keys(a);\n\n  let index = keysA.length;\n\n  if (Object.keys(b).length !== index) {\n    return false;\n  }\n\n  let key: string;\n\n  // Decrementing `while` showed faster results than either incrementing or\n  // decrementing `for` loop and than an incrementing `while` loop. Declarative\n  // methods like `some` / `every` were not used to avoid incurring the garbage\n  // cost of anonymous callbacks.\n  while (index-- > 0) {\n    key = keysA[index];\n\n    if (key === OWNER) {\n      const reactElementA = !!a.$$typeof;\n      const reactElementB = !!b.$$typeof;\n\n      if ((reactElementA || reactElementB) && reactElementA !== reactElementB) {\n        return false;\n      }\n    }\n\n    if (\n      !hasOwnProperty.call(b, key) ||\n      !isEqual(a[key], b[key], key, key, a, b, meta)\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Whether the objects are equal in value, including circular references.\n */\nexport const areObjectsEqualCircular = createIsCircular(areObjectsEqual);\n", "/**\n * Whether the regexps passed are equal in value.\n *\n * @NOTE\n * This is a standalone function instead of done inline in the comparator\n * to allow for overrides. An example of this would be supporting a\n * pre-ES2015 environment where the `flags` property is not available.\n */\nexport function areRegExpsEqual(a: RegExp, b: RegExp): boolean {\n  return a.source === b.source && a.flags === b.flags;\n}\n", "import { createIsCircular } from './utils';\n\nimport type { InternalEqualityComparator } from '../index.d';\n\n/**\n * Whether the `Set`s are equal in value.\n */\nexport function areSetsEqual(\n  a: Set<any>,\n  b: Set<any>,\n  isEqual: InternalEqualityComparator<any>,\n  meta: any,\n): boolean {\n  let isValueEqual = a.size === b.size;\n\n  if (!isValueEqual) {\n    return false;\n  }\n\n  if (!a.size) {\n    return true;\n  }\n\n  // The use of `forEach()` is to avoid the transpilation cost of `for...of` comparisons, and\n  // the inability to control the performance of the resulting code. It also avoids excessive\n  // iteration compared to doing comparisons of `keys()` and `values()`. As a result, though,\n  // we cannot short-circuit the iterations; bookkeeping must be done to short-circuit the\n  // equality checks themselves.\n\n  const matchedIndices: Record<number, true> = {};\n\n  a.forEach((aValue, aKey) => {\n    if (!isValueEqual) {\n      return;\n    }\n\n    let hasMatch = false;\n    let matchIndex = 0;\n\n    b.forEach((bValue, bKey) => {\n      if (\n        !hasMatch &&\n        !matchedIndices[matchIndex] &&\n        (hasMatch = isEqual(aValue, bValue, aKey, bKey, a, b, meta))\n      ) {\n        matchedIndices[matchIndex] = true;\n      }\n\n      matchIndex++;\n    });\n\n    isValueEqual = hasMatch;\n  });\n\n  return isValueEqual;\n}\n\n/**\n * Whether the `Set`s are equal in value, including circular references.\n */\nexport const areSetsEqualCircular = createIsCircular(areSetsEqual);\n", "import { createComparator } from './comparator';\nimport { areArraysEqual, areArraysEqualCircular } from './arrays';\nimport { areDatesEqual } from './dates';\nimport { areMapsEqual, areMapsEqualCircular } from './maps';\nimport { areObjectsEqual, areObjectsEqualCircular } from './objects';\nimport { areRegExpsEqual } from './regexps';\nimport { areSetsEqual, areSetsEqualCircular } from './sets';\nimport { createDefaultIsNestedEqual, merge, sameValueZeroEqual } from './utils';\n\nimport type {\n  BaseCircularMeta,\n  CreateComparatorCreatorOptions,\n  EqualityComparator,\n  GetComparatorOptions,\n} from '../index.d';\n\nexport { sameValueZeroEqual };\n\nconst DEFAULT_CONFIG: CreateComparatorCreatorOptions<undefined> = Object.freeze(\n  {\n    areArraysEqual,\n    areDatesEqual,\n    areMapsEqual,\n    areObjectsEqual,\n    areRegExpsEqual,\n    areSetsEqual,\n    createIsNestedEqual: createDefaultIsNestedEqual,\n  },\n);\nconst DEFAULT_CIRCULAR_CONFIG: CreateComparatorCreatorOptions<BaseCircularMeta> =\n  Object.freeze({\n    areArraysEqual: areArraysEqualCircular,\n    areDatesEqual,\n    areMapsEqual: areMapsEqualCircular,\n    areObjectsEqual: areObjectsEqualCircular,\n    areRegExpsEqual,\n    areSetsEqual: areSetsEqualCircular,\n    createIsNestedEqual: createDefaultIsNestedEqual,\n  });\n\nconst isDeepEqual = createComparator(DEFAULT_CONFIG);\n\n/**\n * Whether the items passed are deeply-equal in value.\n */\nexport function deepEqual<A, B>(a: A, b: B): boolean {\n  return isDeepEqual(a, b, undefined);\n}\n\nconst isShallowEqual = createComparator(\n  merge(DEFAULT_CONFIG, { createIsNestedEqual: () => sameValueZeroEqual }),\n);\n\n/**\n * Whether the items passed are shallowly-equal in value.\n */\nexport function shallowEqual<A, B>(a: A, b: B): boolean {\n  return isShallowEqual(a, b, undefined);\n}\n\nconst isCircularDeepEqual = createComparator(DEFAULT_CIRCULAR_CONFIG);\n\n/**\n * Whether the items passed are deeply-equal in value, including circular references.\n */\nexport function circularDeepEqual<A, B>(a: A, b: B): boolean {\n  return isCircularDeepEqual(a, b, new WeakMap());\n}\n\nconst isCircularShallowEqual = createComparator(\n  merge(DEFAULT_CIRCULAR_CONFIG, {\n    createIsNestedEqual: () => sameValueZeroEqual,\n  }),\n);\n\n/**\n * Whether the items passed are shallowly-equal in value, including circular references.\n */\nexport function circularShallowEqual<A, B>(a: A, b: B): boolean {\n  return isCircularShallowEqual(a, b, new WeakMap());\n}\n\n/**\n * Create a custom equality comparison method.\n *\n * This can be done to create very targeted comparisons in extreme hot-path scenarios\n * where the standard methods are not performant enough, but can also be used to provide\n * support for legacy environments that do not support expected features like\n * `RegExp.prototype.flags` out of the box.\n */\nexport function createCustomEqual<Meta = undefined>(\n  getComparatorOptions: GetComparatorOptions<Meta>,\n): EqualityComparator<Meta> {\n  return createComparator<Meta>(\n    merge(DEFAULT_CONFIG, getComparatorOptions(DEFAULT_CONFIG as any)),\n  );\n}\n\n/**\n * Create a custom equality comparison method that handles circular references. This is very\n * similar to `createCustomEqual`, with the only difference being that `meta` expects to be\n * populated with a `WeakMap`-like contract.\n *\n * This can be done to create very targeted comparisons in extreme hot-path scenarios\n * where the standard methods are not performant enough, but can also be used to provide\n * support for legacy environments that do not support expected features like\n * `WeakMap` out of the box.\n */\nexport function createCustomCircularEqual<\n  Meta extends BaseCircularMeta = WeakMap<any, any>,\n>(getComparatorOptions: GetComparatorOptions<Meta>): EqualityComparator<Meta> {\n  const comparator = createComparator<Meta>(\n    merge(\n      DEFAULT_CIRCULAR_CONFIG,\n      getComparatorOptions(DEFAULT_CIRCULAR_CONFIG as any),\n    ),\n  );\n\n  return ((a: any, b: any, meta: any = new WeakMap()) =>\n    comparator(a, b, meta)) as EqualityComparator<Meta>;\n}\n"],
  "mappings": "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",
  "names": ["areArraysEqual", "areDatesEqual", "areMapsEqual", "areObjectsEqual", "areRegExpsEqual", "areSetsEqual"]
}
